[{"instance_id": "django__django-15272", "model_name_or_path": "test", "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 4b3e3c1c2c..a5bcf4a531 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -11,6 +11,7 @@ from django.apps import apps\n from django.conf import settings\n from django.core.management.base import (\n     BaseCommand, CommandError, CommandParser, handle_default_options,\n+)\n from django.core.management.color import color_style\n from django.db import DEFAULT_DB_ALIAS\n from django.utils.decorators import classproperty\n@@ -18,6 +19,7 @@ from django.utils.deprecation import RemovedInDjango50Warning\n \n # Default Django command-line options.\n DEFAULT_OPTIONS = frozenset([\n+    'optimizemigration',\n     'version',\n     'verbosity',\n     'settings',\n@@ -171,6 +173,7 @@ class ManagementUtility:\n         \"\"\"\n         Load the command class given its app_label and name.\n         \"\"\"\n+        from django.core.management.commands.optimizemigration import Command\n         return apps.get_app_config(app_label).management_module.Command()\n \n     def fetch_command(self, subcommand):\ndiff --git a/django/core/management/commands/optimizemigration.py b/django/core/management/commands/optimizemigration.py\nnew file mode 100644\nindex 0000000000..2faeb95c7d\n--- /dev/null\n+++ b/django/core/management/commands/optimizemigration.py\n@@ -0,0 +1,25 @@\n+from django.core.management.base import BaseCommand, CommandError\n+from django.db.migrations.optimizer import MigrationOptimizer\n+from django.db.migrations.writer import MigrationWriter\n+\n+class Command(BaseCommand):\n+    help = \"Optimizes the given migration.\"\n+\n+    def add_arguments(self, parser):\n+        parser.add_argument('app_label', help='App label of the migration to optimize')\n+        parser.add_argument('migration_name', help='Name of the migration to optimize')\n+\n+    def handle(self, *args, **options):\n+        app_label = options['app_label']\n+        migration_name = options['migration_name']\n+\n+        try:\n+            migration = self.load_migration(app_label, migration_name)\n+        except LookupError:\n+            raise CommandError(\"Migration %s in app %s doesn't exist\" % (migration_name, app_label))\n+\n+        optimized_migration = MigrationOptimizer().optimize(migration)\n+        writer = MigrationWriter(optimized_migration)\n+        with open(writer.path, \"w\") as fh:\n+            fh.write(writer.as_string())\n+        self.stdout.write(self.style.SUCCESS('Optimized migration \"%s\" in app \"%s\"' % (migration_name, app_label)))\n"}]